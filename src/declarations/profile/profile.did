type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: vec nat8;
   token: opt StreamingCallbackToken;
 };
type Result = 
 variant {
   err: Error;
   ok: Profile;
 };
type ProfileWithId = 
 record {
   details: Details;
   id: nat;
 };
type Profile = record {details: Details;};
type HttpResponse = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: vec nat8;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Error = 
 variant {
   AlreadyExists;
   NotFound;
 };
type Details = 
 record {
   age: nat;
   city: text;
   country: text;
   imageFile: text;
   name: text;
   state: text;
   surname: text;
 };
type Chunk = 
 record {
   batch_name: text;
   content: vec nat8;
 };
service : {
  commit_batch:
   (record {
      batch_name: text;
      chunk_ids: vec nat;
      content_type: text;
    }) -> ();
  create: (Profile) -> (nat);
  create_chunk: (Chunk) -> (record {chunk_id: nat;});
  delete: (nat) -> (bool);
  http_request: (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback: (StreamingCallbackToken) ->
   (StreamingCallbackHttpResponse) query;
  listAllProfiles: () -> (vec ProfileWithId) query;
  read: (nat) -> (Result) query;
  update: (nat, Profile) -> (bool);
}
